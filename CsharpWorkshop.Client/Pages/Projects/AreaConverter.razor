@page "/AreaCalculator"

<h3>Area Converter</h3>

<p>Total Area: @total pieces</p>
<p>Total Cost at 180 dollars a piece: $@totalCost</p>
<hr />
Rectangle Width: @RectWidth 
<br />
<MudInput @bind-Value="RectWidth" Label="Rectangle Width" Variant="Variant.Filled" /><br /> 
Rectangle Length: @RectLength 
<br />
<MudInput @bind-Value="RectLength" Label="Rectangle Length" Variant="Variant.Filled" />
<br />
Circle Radius: @CircRadius 
<br />
<MudInput @bind-Value="CircRadius" Label="Circle Radius" Variant="Variant.Filled" />
<br />
Triangle Base: @TriBottom 
<br />
<MudInput @bind-Value="TriBottom" Label="Triangle Base" Variant="Variant.Filled" />
<br />
Triangle Height: @TriHeight 
<br />
<MudInput @bind-Value="TriHeight" Label="Triangle Height" Variant="Variant.Filled" />
<br />


<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnInitialized">Calculate</MudButton>

@code {
    private double total;
    private double totalCost;
    private double RectLength;
    private double RectWidth;
    private double CircRadius;
    private double TriBottom;
    private double TriHeight;

    protected override void OnInitialized()
    {
        total = Math.Ceiling(RectArea() + CircArea() + TriArea());
        totalCost = Math.Round(total * 180, 2);
    }

    private double RectArea()
    {
        return Rect(RectLength, RectWidth);
    }

    private double CircArea()
    {
        return Circle(CircRadius);
    }

    private double TriArea()
    {
        return Triangle(TriBottom, TriHeight);
    }

    private double Rect(double length, double width)
    {
        return length * width;
    }

    private double Circle(double radius)
    {
        return Math.PI * Math.Pow(radius, 2);
    }

    private double Triangle(double bottom, double height)
    {
        return 0.5 * bottom * height;
    }
}
