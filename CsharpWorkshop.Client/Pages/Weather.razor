@page "/weather"
@inject HttpClient Http
@using MudBlazor

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" Color="Color.Primary">Weather</MudText>
<MudText>This component demonstrates showing data.</MudText>

@if (forecasts == null)
{
    <MudText Typo="Typo.h5">Loading...</MudText>
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudTable Items="forecasts" Dense="true" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temperature (C)</MudTh>
            <MudTh>Temperature (F)</MudTh>
            <MudTh>Summary</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                <MudTd DataLabel="Temperature (C)">@context.TemperatureC</MudTd>
                <MudTd DataLabel="Temperature (F)">@context.TemperatureF</MudTd>
                <MudTd DataLabel="Summary">@context.Summary</MudTd>
            </RowTemplate>
        </MudTable>
}

@code {

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7035/WeatherForecast");
        }
        catch (Exception ex)
        {
            // Handle or log the exception
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }


    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
